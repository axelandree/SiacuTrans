//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
// 
#pragma warning disable 1591

namespace Claro.SIACU.ProxyService.Transac.Service.SIACPost.MigracionPlanPostpagoWS {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="ebsMigracionPlanPostpagoSOAP11Binding", Namespace="http://claro.com.pe/eai/ebs/ws/postventa/ebsMigracionPlanPostpago")]
    public partial class ebsMigracionPlanPostpago_ep : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback programarMigracionOperationCompleted;
        
        private System.Threading.SendOrPostCallback realizarMigracionOperationCompleted;
        
        private System.Threading.SendOrPostCallback procesarProgramacionOperationCompleted;
        
        private System.Threading.SendOrPostCallback relanzarProgramacionMigracionesOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public ebsMigracionPlanPostpago_ep() {
            this.Url = global::Claro.SIACU.ProxyService.Transac.Service.Properties.Settings.Default.Claro_SIACU_ProxyService_Transac_Service_SIACPost_MigracionPlanPostpagoWS_ebsMigracionPlanPostpago_ep;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event programarMigracionCompletedEventHandler programarMigracionCompleted;
        
        /// <remarks/>
        public event realizarMigracionCompletedEventHandler realizarMigracionCompleted;
        
        /// <remarks/>
        public event procesarProgramacionCompletedEventHandler procesarProgramacionCompleted;
        
        /// <remarks/>
        public event relanzarProgramacionMigracionesCompletedEventHandler relanzarProgramacionMigracionesCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://claro.com.pe/eai/ebs/ws/postventa/ebsMigracionPlanPostpago/programarMigrac" +
            "ion", RequestElementName="programarMigracionPlanRequest", RequestNamespace="http://claro.com.pe/eai/ebs/ws/postventa/ebsMigracionPlanPostpago", ResponseElementName="programarMigracionPlanResponse", ResponseNamespace="http://claro.com.pe/eai/ebs/ws/postventa/ebsMigracionPlanPostpago", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("codigoRespuesta")]
        public string programarMigracion(
                    ref string idTransaccion, 
                    string ipAplicacion, 
                    string aplicacion, 
                    string msisdn, 
                    string coId, 
                    string customerId, 
                    string cuenta, 
                    string escenario, 
                    string tipoProducto, 
                    string serviciosAdicionales, 
                    string codigoProducto, 
                    string codPlanBase, 
                    decimal montoApadece, 
                    decimal montoFidelizar, 
                    string flagValidaApadece, 
                    string flagAplicaApadece, 
                    string topeConsumo, 
                    string tipoTope, 
                    string descripcionTipoTpe, 
                    string tipoRegistroTope, 
                    int topeControlConsumo, 
                    [System.Xml.Serialization.XmlElementAttribute(DataType="date")] System.DateTime fechaProgramacionTope, 
                    string CAC, 
                    string asesor, 
                    string codigoInteraccion, 
                    decimal montoPCS, 
                    string areaPCS, 
                    string motivoPCS, 
                    string subMotivoPCS, 
                    int cicloFacturacion, 
                    string idTipoCliente, 
                    string numeroDocumento, 
                    string flagServicioOnTop, 
                    [System.Xml.Serialization.XmlElementAttribute(DataType="date")] System.DateTime fechaProgramacion, 
                    string flagLimiteCredito, 
                    string tipoClarify, 
                    string numeroCuentaPadre, 
                    string usuarioAplicacion, 
                    string usuarioSistema, 
                    out string mensajeRespuesta) {
            object[] results = this.Invoke("programarMigracion", new object[] {
                        idTransaccion,
                        ipAplicacion,
                        aplicacion,
                        msisdn,
                        coId,
                        customerId,
                        cuenta,
                        escenario,
                        tipoProducto,
                        serviciosAdicionales,
                        codigoProducto,
                        codPlanBase,
                        montoApadece,
                        montoFidelizar,
                        flagValidaApadece,
                        flagAplicaApadece,
                        topeConsumo,
                        tipoTope,
                        descripcionTipoTpe,
                        tipoRegistroTope,
                        topeControlConsumo,
                        fechaProgramacionTope,
                        CAC,
                        asesor,
                        codigoInteraccion,
                        montoPCS,
                        areaPCS,
                        motivoPCS,
                        subMotivoPCS,
                        cicloFacturacion,
                        idTipoCliente,
                        numeroDocumento,
                        flagServicioOnTop,
                        fechaProgramacion,
                        flagLimiteCredito,
                        tipoClarify,
                        numeroCuentaPadre,
                        usuarioAplicacion,
                        usuarioSistema});
            idTransaccion = ((string)(results[1]));
            mensajeRespuesta = ((string)(results[2]));
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void programarMigracionAsync(
                    string idTransaccion, 
                    string ipAplicacion, 
                    string aplicacion, 
                    string msisdn, 
                    string coId, 
                    string customerId, 
                    string cuenta, 
                    string escenario, 
                    string tipoProducto, 
                    string serviciosAdicionales, 
                    string codigoProducto, 
                    string codPlanBase, 
                    decimal montoApadece, 
                    decimal montoFidelizar, 
                    string flagValidaApadece, 
                    string flagAplicaApadece, 
                    string topeConsumo, 
                    string tipoTope, 
                    string descripcionTipoTpe, 
                    string tipoRegistroTope, 
                    int topeControlConsumo, 
                    System.DateTime fechaProgramacionTope, 
                    string CAC, 
                    string asesor, 
                    string codigoInteraccion, 
                    decimal montoPCS, 
                    string areaPCS, 
                    string motivoPCS, 
                    string subMotivoPCS, 
                    int cicloFacturacion, 
                    string idTipoCliente, 
                    string numeroDocumento, 
                    string flagServicioOnTop, 
                    System.DateTime fechaProgramacion, 
                    string flagLimiteCredito, 
                    string tipoClarify, 
                    string numeroCuentaPadre, 
                    string usuarioAplicacion, 
                    string usuarioSistema) {
            this.programarMigracionAsync(idTransaccion, ipAplicacion, aplicacion, msisdn, coId, customerId, cuenta, escenario, tipoProducto, serviciosAdicionales, codigoProducto, codPlanBase, montoApadece, montoFidelizar, flagValidaApadece, flagAplicaApadece, topeConsumo, tipoTope, descripcionTipoTpe, tipoRegistroTope, topeControlConsumo, fechaProgramacionTope, CAC, asesor, codigoInteraccion, montoPCS, areaPCS, motivoPCS, subMotivoPCS, cicloFacturacion, idTipoCliente, numeroDocumento, flagServicioOnTop, fechaProgramacion, flagLimiteCredito, tipoClarify, numeroCuentaPadre, usuarioAplicacion, usuarioSistema, null);
        }
        
        /// <remarks/>
        public void programarMigracionAsync(
                    string idTransaccion, 
                    string ipAplicacion, 
                    string aplicacion, 
                    string msisdn, 
                    string coId, 
                    string customerId, 
                    string cuenta, 
                    string escenario, 
                    string tipoProducto, 
                    string serviciosAdicionales, 
                    string codigoProducto, 
                    string codPlanBase, 
                    decimal montoApadece, 
                    decimal montoFidelizar, 
                    string flagValidaApadece, 
                    string flagAplicaApadece, 
                    string topeConsumo, 
                    string tipoTope, 
                    string descripcionTipoTpe, 
                    string tipoRegistroTope, 
                    int topeControlConsumo, 
                    System.DateTime fechaProgramacionTope, 
                    string CAC, 
                    string asesor, 
                    string codigoInteraccion, 
                    decimal montoPCS, 
                    string areaPCS, 
                    string motivoPCS, 
                    string subMotivoPCS, 
                    int cicloFacturacion, 
                    string idTipoCliente, 
                    string numeroDocumento, 
                    string flagServicioOnTop, 
                    System.DateTime fechaProgramacion, 
                    string flagLimiteCredito, 
                    string tipoClarify, 
                    string numeroCuentaPadre, 
                    string usuarioAplicacion, 
                    string usuarioSistema, 
                    object userState) {
            if ((this.programarMigracionOperationCompleted == null)) {
                this.programarMigracionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnprogramarMigracionOperationCompleted);
            }
            this.InvokeAsync("programarMigracion", new object[] {
                        idTransaccion,
                        ipAplicacion,
                        aplicacion,
                        msisdn,
                        coId,
                        customerId,
                        cuenta,
                        escenario,
                        tipoProducto,
                        serviciosAdicionales,
                        codigoProducto,
                        codPlanBase,
                        montoApadece,
                        montoFidelizar,
                        flagValidaApadece,
                        flagAplicaApadece,
                        topeConsumo,
                        tipoTope,
                        descripcionTipoTpe,
                        tipoRegistroTope,
                        topeControlConsumo,
                        fechaProgramacionTope,
                        CAC,
                        asesor,
                        codigoInteraccion,
                        montoPCS,
                        areaPCS,
                        motivoPCS,
                        subMotivoPCS,
                        cicloFacturacion,
                        idTipoCliente,
                        numeroDocumento,
                        flagServicioOnTop,
                        fechaProgramacion,
                        flagLimiteCredito,
                        tipoClarify,
                        numeroCuentaPadre,
                        usuarioAplicacion,
                        usuarioSistema}, this.programarMigracionOperationCompleted, userState);
        }
        
        private void OnprogramarMigracionOperationCompleted(object arg) {
            if ((this.programarMigracionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.programarMigracionCompleted(this, new programarMigracionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://claro.com.pe/eai/ebs/ws/postventa/ebsMigracionPlanPostpago/realizarMigraci" +
            "on", RequestElementName="realizarMigracionPlanRequest", RequestNamespace="http://claro.com.pe/eai/ebs/ws/postventa/ebsMigracionPlanPostpago", ResponseElementName="realizarMigracionPlanResponse", ResponseNamespace="http://claro.com.pe/eai/ebs/ws/postventa/ebsMigracionPlanPostpago", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("codigoRespuesta")]
        public string realizarMigracion(
                    string idTransaccionProceso, 
                    ref string idTransaccion, 
                    string ipAplicacion, 
                    string aplicacion, 
                    string msisdn, 
                    string coId, 
                    string customerId, 
                    string cuenta, 
                    string escenario, 
                    string ipoProducto, 
                    string serviciosAdicionales, 
                    string codigoProducto, 
                    float montoApadece, 
                    float montoFidelizar, 
                    string flagValidaApadece, 
                    string flagAplicaApadece, 
                    string topeConsumo, 
                    string tipoTope, 
                    string descripcionTipoTpe, 
                    string tipoRegistroTope, 
                    int topeControlConsumo, 
                    [System.Xml.Serialization.XmlElementAttribute(DataType="date")] System.DateTime fechaProgramacionTope, 
                    string CAC, 
                    string asesor, 
                    string codigoInteraccion, 
                    float montoPCS, 
                    string areaPCS, 
                    string motivoPCS, 
                    string subMotivoPCS, 
                    int cicloFacturacion, 
                    string idTipoCliente, 
                    string numeroDocumento, 
                    string flagServicioOnTop, 
                    [System.Xml.Serialization.XmlElementAttribute(DataType="date")] System.DateTime fechaProgramacion, 
                    string flagLimiteCredito, 
                    string tipoClarify, 
                    string numeroCuentaPadre, 
                    string usuarioAplicacion, 
                    string usuarioSistema, 
                    out string mensajeRespuesta) {
            object[] results = this.Invoke("realizarMigracion", new object[] {
                        idTransaccionProceso,
                        idTransaccion,
                        ipAplicacion,
                        aplicacion,
                        msisdn,
                        coId,
                        customerId,
                        cuenta,
                        escenario,
                        ipoProducto,
                        serviciosAdicionales,
                        codigoProducto,
                        montoApadece,
                        montoFidelizar,
                        flagValidaApadece,
                        flagAplicaApadece,
                        topeConsumo,
                        tipoTope,
                        descripcionTipoTpe,
                        tipoRegistroTope,
                        topeControlConsumo,
                        fechaProgramacionTope,
                        CAC,
                        asesor,
                        codigoInteraccion,
                        montoPCS,
                        areaPCS,
                        motivoPCS,
                        subMotivoPCS,
                        cicloFacturacion,
                        idTipoCliente,
                        numeroDocumento,
                        flagServicioOnTop,
                        fechaProgramacion,
                        flagLimiteCredito,
                        tipoClarify,
                        numeroCuentaPadre,
                        usuarioAplicacion,
                        usuarioSistema});
            idTransaccion = ((string)(results[1]));
            mensajeRespuesta = ((string)(results[2]));
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void realizarMigracionAsync(
                    string idTransaccionProceso, 
                    string idTransaccion, 
                    string ipAplicacion, 
                    string aplicacion, 
                    string msisdn, 
                    string coId, 
                    string customerId, 
                    string cuenta, 
                    string escenario, 
                    string ipoProducto, 
                    string serviciosAdicionales, 
                    string codigoProducto, 
                    float montoApadece, 
                    float montoFidelizar, 
                    string flagValidaApadece, 
                    string flagAplicaApadece, 
                    string topeConsumo, 
                    string tipoTope, 
                    string descripcionTipoTpe, 
                    string tipoRegistroTope, 
                    int topeControlConsumo, 
                    System.DateTime fechaProgramacionTope, 
                    string CAC, 
                    string asesor, 
                    string codigoInteraccion, 
                    float montoPCS, 
                    string areaPCS, 
                    string motivoPCS, 
                    string subMotivoPCS, 
                    int cicloFacturacion, 
                    string idTipoCliente, 
                    string numeroDocumento, 
                    string flagServicioOnTop, 
                    System.DateTime fechaProgramacion, 
                    string flagLimiteCredito, 
                    string tipoClarify, 
                    string numeroCuentaPadre, 
                    string usuarioAplicacion, 
                    string usuarioSistema) {
            this.realizarMigracionAsync(idTransaccionProceso, idTransaccion, ipAplicacion, aplicacion, msisdn, coId, customerId, cuenta, escenario, ipoProducto, serviciosAdicionales, codigoProducto, montoApadece, montoFidelizar, flagValidaApadece, flagAplicaApadece, topeConsumo, tipoTope, descripcionTipoTpe, tipoRegistroTope, topeControlConsumo, fechaProgramacionTope, CAC, asesor, codigoInteraccion, montoPCS, areaPCS, motivoPCS, subMotivoPCS, cicloFacturacion, idTipoCliente, numeroDocumento, flagServicioOnTop, fechaProgramacion, flagLimiteCredito, tipoClarify, numeroCuentaPadre, usuarioAplicacion, usuarioSistema, null);
        }
        
        /// <remarks/>
        public void realizarMigracionAsync(
                    string idTransaccionProceso, 
                    string idTransaccion, 
                    string ipAplicacion, 
                    string aplicacion, 
                    string msisdn, 
                    string coId, 
                    string customerId, 
                    string cuenta, 
                    string escenario, 
                    string ipoProducto, 
                    string serviciosAdicionales, 
                    string codigoProducto, 
                    float montoApadece, 
                    float montoFidelizar, 
                    string flagValidaApadece, 
                    string flagAplicaApadece, 
                    string topeConsumo, 
                    string tipoTope, 
                    string descripcionTipoTpe, 
                    string tipoRegistroTope, 
                    int topeControlConsumo, 
                    System.DateTime fechaProgramacionTope, 
                    string CAC, 
                    string asesor, 
                    string codigoInteraccion, 
                    float montoPCS, 
                    string areaPCS, 
                    string motivoPCS, 
                    string subMotivoPCS, 
                    int cicloFacturacion, 
                    string idTipoCliente, 
                    string numeroDocumento, 
                    string flagServicioOnTop, 
                    System.DateTime fechaProgramacion, 
                    string flagLimiteCredito, 
                    string tipoClarify, 
                    string numeroCuentaPadre, 
                    string usuarioAplicacion, 
                    string usuarioSistema, 
                    object userState) {
            if ((this.realizarMigracionOperationCompleted == null)) {
                this.realizarMigracionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnrealizarMigracionOperationCompleted);
            }
            this.InvokeAsync("realizarMigracion", new object[] {
                        idTransaccionProceso,
                        idTransaccion,
                        ipAplicacion,
                        aplicacion,
                        msisdn,
                        coId,
                        customerId,
                        cuenta,
                        escenario,
                        ipoProducto,
                        serviciosAdicionales,
                        codigoProducto,
                        montoApadece,
                        montoFidelizar,
                        flagValidaApadece,
                        flagAplicaApadece,
                        topeConsumo,
                        tipoTope,
                        descripcionTipoTpe,
                        tipoRegistroTope,
                        topeControlConsumo,
                        fechaProgramacionTope,
                        CAC,
                        asesor,
                        codigoInteraccion,
                        montoPCS,
                        areaPCS,
                        motivoPCS,
                        subMotivoPCS,
                        cicloFacturacion,
                        idTipoCliente,
                        numeroDocumento,
                        flagServicioOnTop,
                        fechaProgramacion,
                        flagLimiteCredito,
                        tipoClarify,
                        numeroCuentaPadre,
                        usuarioAplicacion,
                        usuarioSistema}, this.realizarMigracionOperationCompleted, userState);
        }
        
        private void OnrealizarMigracionOperationCompleted(object arg) {
            if ((this.realizarMigracionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.realizarMigracionCompleted(this, new realizarMigracionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://claro.com.pe/eai/ebs/ws/postventa/ebsMigracionPlanPostpago/procesarProgram" +
            "acion", RequestElementName="ProcesarProgramacionMigracionPlanRequest", RequestNamespace="http://claro.com.pe/eai/ebs/ws/postventa/ebsMigracionPlanPostpago", OneWay=true, Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void procesarProgramacion(string idTransaccion, string ipAplicacion, string aplicacion, [System.Xml.Serialization.XmlElementAttribute(DataType="date")] System.DateTime fechaEjecucion) {
            this.Invoke("procesarProgramacion", new object[] {
                        idTransaccion,
                        ipAplicacion,
                        aplicacion,
                        fechaEjecucion});
        }
        
        /// <remarks/>
        public void procesarProgramacionAsync(string idTransaccion, string ipAplicacion, string aplicacion, System.DateTime fechaEjecucion) {
            this.procesarProgramacionAsync(idTransaccion, ipAplicacion, aplicacion, fechaEjecucion, null);
        }
        
        /// <remarks/>
        public void procesarProgramacionAsync(string idTransaccion, string ipAplicacion, string aplicacion, System.DateTime fechaEjecucion, object userState) {
            if ((this.procesarProgramacionOperationCompleted == null)) {
                this.procesarProgramacionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnprocesarProgramacionOperationCompleted);
            }
            this.InvokeAsync("procesarProgramacion", new object[] {
                        idTransaccion,
                        ipAplicacion,
                        aplicacion,
                        fechaEjecucion}, this.procesarProgramacionOperationCompleted, userState);
        }
        
        private void OnprocesarProgramacionOperationCompleted(object arg) {
            if ((this.procesarProgramacionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.procesarProgramacionCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://claro.com.pe/eai/ebs/ws/postventa/ebsMigracionPlanPostpago/relanzarProgram" +
            "acionMigraciones", RequestElementName="RelanzarProgramacionMigracionPlanRequest", RequestNamespace="http://claro.com.pe/eai/ebs/ws/postventa/ebsMigracionPlanPostpago", OneWay=true, Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void relanzarProgramacionMigraciones(string idTransaccion, string ipAplicacion, string aplicacion, [System.Xml.Serialization.XmlElementAttribute(DataType="date")] System.DateTime fechaEjecucion) {
            this.Invoke("relanzarProgramacionMigraciones", new object[] {
                        idTransaccion,
                        ipAplicacion,
                        aplicacion,
                        fechaEjecucion});
        }
        
        /// <remarks/>
        public void relanzarProgramacionMigracionesAsync(string idTransaccion, string ipAplicacion, string aplicacion, System.DateTime fechaEjecucion) {
            this.relanzarProgramacionMigracionesAsync(idTransaccion, ipAplicacion, aplicacion, fechaEjecucion, null);
        }
        
        /// <remarks/>
        public void relanzarProgramacionMigracionesAsync(string idTransaccion, string ipAplicacion, string aplicacion, System.DateTime fechaEjecucion, object userState) {
            if ((this.relanzarProgramacionMigracionesOperationCompleted == null)) {
                this.relanzarProgramacionMigracionesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnrelanzarProgramacionMigracionesOperationCompleted);
            }
            this.InvokeAsync("relanzarProgramacionMigraciones", new object[] {
                        idTransaccion,
                        ipAplicacion,
                        aplicacion,
                        fechaEjecucion}, this.relanzarProgramacionMigracionesOperationCompleted, userState);
        }
        
        private void OnrelanzarProgramacionMigracionesOperationCompleted(object arg) {
            if ((this.relanzarProgramacionMigracionesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.relanzarProgramacionMigracionesCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")]
    public delegate void programarMigracionCompletedEventHandler(object sender, programarMigracionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class programarMigracionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal programarMigracionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string idTransaccion {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string mensajeRespuesta {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")]
    public delegate void realizarMigracionCompletedEventHandler(object sender, realizarMigracionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class realizarMigracionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal realizarMigracionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string idTransaccion {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string mensajeRespuesta {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")]
    public delegate void procesarProgramacionCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")]
    public delegate void relanzarProgramacionMigracionesCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
}

#pragma warning restore 1591